## WARNING: This file was autogenerated!
## Manual modifications will be overwritten
## unless ignore: true is set in generate.yaml!
## Last Modification: 11:56:44 on 10-02-2023.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    crossplane.jamf.com/provider: ""
  name: compositerole.iam.aws.jamf.io
spec:
  compositeTypeRef:
    apiVersion: iam.aws.jamf.io/v1beta1
    kind: CompositeRole
  patchSets:
  - name: Name
    patches:
    - fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: External-Name
    patches:
    - fromFieldPath: metadata.annotations[crossplane.io/external-name]
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: Common
    patches:
    - fromFieldPath: metadata.labels['crossplane.io/claim-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-name']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-namespace']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/composite']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/composite']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['external-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['external-name']
      type: FromCompositeFieldPath
  - name: Parameters
    patches:
    - fromFieldPath: spec.deletionPolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.deletionPolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.assumeRolePolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.assumeRolePolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.description
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.description
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.forceDetachPolicies
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.forceDetachPolicies
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.inlinePolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.inlinePolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.managedPolicyArns
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.managedPolicyArns
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.maxSessionDuration
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.maxSessionDuration
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.path
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.path
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.permissionsBoundary
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.permissionsBoundary
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.assumeRolePolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.assumeRolePolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.description
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.description
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.forceDetachPolicies
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.forceDetachPolicies
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.inlinePolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.inlinePolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.managedPolicyArns
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.managedPolicyArns
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.maxSessionDuration
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.maxSessionDuration
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.path
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.path
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.permissionsBoundary
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.permissionsBoundary
      type: FromCompositeFieldPath
    - fromFieldPath: spec.initProvider.tags
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.initProvider.tags
      type: FromCompositeFieldPath
    - fromFieldPath: spec.managementPolicies
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.managementPolicies
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.type
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.type
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.name
      type: FromCompositeFieldPath
  - name: Labels
    patches:
    - fromFieldPath: metadata.labels['controlling.crossplane.jamf.com/cost-reference']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.crossplane.jamf.com/cost-reference']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.crossplane.jamf.com/owner']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.crossplane.jamf.com/owner']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.crossplane.jamf.com/product']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.crossplane.jamf.com/product']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.crossplane.jamf.com/account']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.crossplane.jamf.com/account']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.crossplane.jamf.com/cluster']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.crossplane.jamf.com/cluster']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.crossplane.jamf.com/environment']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.crossplane.jamf.com/environment']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.crossplane.jamf.com/namespace']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.crossplane.jamf.com/namespace']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.crossplane.jamf.com/team']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.crossplane.jamf.com/team']
      type: FromCompositeFieldPath
  - name: Tags
    patches:
    - fromFieldPath: metadata.labels[tags.crossplane.jamf.com/account]
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.tags[tags.crossplane.jamf.com/account]
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.crossplane.jamf.com/cluster]
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.tags[tags.crossplane.jamf.com/cluster]
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.crossplane.jamf.com/environment]
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.tags[tags.crossplane.jamf.com/environment]
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.crossplane.jamf.com/namespace]
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.tags[tags.crossplane.jamf.com/namespace]
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.crossplane.jamf.com/team]
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.tags[tags.crossplane.jamf.com/team]
      type: FromCompositeFieldPath
  resources:
  - base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        labels:
          tags.crossplane.jamf.com/owner: chaosmonkeys
          tags.crossplane.jamf.com/project: kubernetes
      spec:
        forProvider:
          tags:
            commonLocalTagA: comonLocalTagAValue
            commonLocalTagB: comonLocalTagBValue
            owner: chaosmonkeys
            project: kubernetes
        providerConfigRef:
          name: default
    name: Role
    patches:
    - patchSetName: Name
      type: PatchSet
    - patchSetName: External-Name
      type: PatchSet
    - patchSetName: Common
      type: PatchSet
    - patchSetName: Parameters
      type: PatchSet
    - patchSetName: Labels
      type: PatchSet
    - patchSetName: Tags
      type: PatchSet
    - fromFieldPath: status.atProvider.arn
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.arn
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.assumeRolePolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.assumeRolePolicy
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.createDate
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.createDate
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.description
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.description
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.forceDetachPolicies
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.forceDetachPolicies
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.id
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.id
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.inlinePolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.inlinePolicy
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.managedPolicyArns
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.managedPolicyArns
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.maxSessionDuration
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.maxSessionDuration
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.path
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.path
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.permissionsBoundary
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.permissionsBoundary
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.roleLastUsed
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.roleLastUsed
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.tags
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.tags
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.tagsAll
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.tagsAll
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.uniqueId
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.uniqueId
      type: ToCompositeFieldPath
    - fromFieldPath: metadata.annotations["crossplane.io/external-name"]
      policy:
        fromFieldPath: Optional
      toFieldPath: status.uid
      type: ToCompositeFieldPath
    - fromFieldPath: status.conditions
      policy:
        fromFieldPath: Optional
      toFieldPath: status.observed.conditions
      type: ToCompositeFieldPath
